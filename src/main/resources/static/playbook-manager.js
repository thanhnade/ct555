// Playbook Manager - Qu·∫£n l√Ω playbook v√† template K8s
// =====================================================

// Use the global cluster id managed by admin.js
// Access via window.currentClusterId to avoid duplicate declarations

function getClusterId() {
  let cid = window.currentClusterId;
  if (!cid) {
    try {
      const params = new URLSearchParams(window.location.search || '');
      const fromUrl = params.get('clusterId');
      if (fromUrl) {
        window.currentClusterId = fromUrl;
        cid = fromUrl;
      }
    } catch (_) {}
  }
  return cid;
}

// Load playbooks for current cluster (optional override)
async function loadPlaybooks(clusterIdOverride) {
  const cid = clusterIdOverride || getClusterId();
  if (!cid) {
    console.error('No cluster selected');
    return;
  }
  
  try {
    // Persist override to global if provided
    if (clusterIdOverride) {
      window.currentClusterId = clusterIdOverride;
    }
    const response = await fetch(`/api/ansible-playbook/list/${cid}`);
    if (!response.ok) {
      throw new Error('Failed to load playbooks');
    }
    
    const playbooks = await response.json();
    const playbookList = document.getElementById('playbook-list');
    
    if (playbooks.length === 0) {
      playbookList.innerHTML = '<div class="list-group-item text-center text-muted">Ch∆∞a c√≥ playbook n√†o</div>';
    } else {
      playbookList.innerHTML = '';
      playbooks.forEach(pb => {
        const item = document.createElement('div');
        item.className = 'list-group-item d-flex justify-content-between align-items-center';
        item.innerHTML = `
          <div class="playbook-item" data-name="${pb}">
            <div class="fw-bold">${pb}</div>
            <div class="small text-muted">Playbook file</div>
          </div>
          <div class="btn-group btn-group-sm">
            <button class="btn btn-outline-primary btn-sm" onclick="loadPlaybook('${pb}')" title="Xem">
              üëÅÔ∏è
            </button>
            <button class="btn btn-outline-success btn-sm" onclick="executePlaybook('${pb}')" title="Th·ª±c thi">
              ‚ñ∂Ô∏è
            </button>
            <button class="btn btn-outline-danger btn-sm" onclick="deletePlaybook('${pb}')" title="X√≥a">
              üóëÔ∏è
            </button>
          </div>
        `;
        playbookList.appendChild(item);
      });
    }
  } catch (error) {
    console.error('Error loading playbooks:', error);
    showAlert('error', 'L·ªói t·∫£i danh s√°ch playbook: ' + error.message);
  }
}

// Load playbook content
window.loadPlaybook = async function(filename) {
  const cid = getClusterId();
  if (!cid || !filename) return;
  
  try {
    const response = await fetch(`/api/ansible-playbook/read/${cid}/${filename}`);
    if (!response.ok) {
      throw new Error('Failed to load playbook');
    }
    
    const data = await response.json();
    document.getElementById('playbook-filename').value = filename.replace('.yml', '');
    document.getElementById('playbook-editor').value = data.content;
    
    // Show content view and hide execution view
    showPlaybookContentView();
    
  } catch (error) {
    console.error('Error loading playbook:', error);
    showAlert('error', 'L·ªói t·∫£i playbook: ' + error.message);
  }
};

// Save playbook
window.savePlaybook = async function() {
  const cid = getClusterId();
  if (!cid) return;
  
  const filename = document.getElementById('playbook-filename')?.value;
  const content = document.getElementById('playbook-editor')?.value;
  
  if (!filename || !content) {
    showAlert('error', 'Vui l√≤ng nh·∫≠p t√™n file v√† n·ªôi dung');
    return;
  }
  
  try {
    const response = await fetch(`/api/ansible-playbook/save/${cid}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: `filename=${encodeURIComponent(filename)}&content=${encodeURIComponent(content)}`
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'L·ªói l∆∞u playbook');
    }
    
    showAlert('success', 'ƒê√£ l∆∞u playbook th√†nh c√¥ng');
    await loadPlaybooks(); // Refresh list
    
  } catch (error) {
    console.error('Error saving playbook:', error);
    showAlert('error', 'L·ªói l∆∞u playbook: ' + error.message);
  }
};

// Delete playbook
window.deletePlaybook = async function(filename) {
  const cid = getClusterId();
  if (!cid || !filename) return;
  
  if (!confirm(`X√≥a playbook "${filename}"?`)) return;
  
  try {
    const response = await fetch(`/api/ansible-playbook/delete/${cid}/${filename}`, {
      method: 'DELETE'
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'L·ªói x√≥a playbook');
    }
    
    showAlert('success', `ƒê√£ x√≥a playbook "${filename}" th√†nh c√¥ng `);
    await loadPlaybooks(); // Refresh list
    
  } catch (error) {
    console.error('Error deleting playbook:', error);
    showAlert('error', 'L·ªói x√≥a playbook: ' + error.message);
  }
};

// Execute playbook
window.executePlaybook = async function(filename, extraVars = '') {
  const cid = getClusterId();
  if (!cid || !filename) return;
  
  try {
    // Show execution view and hide content view
    showPlaybookExecutionView();
    
    const response = await fetch(`/api/ansible-playbook/execute/${cid}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: `filename=${encodeURIComponent(filename)}&extraVars=${encodeURIComponent(extraVars)}`
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'L·ªói th·ª±c thi playbook');
    }
    
    const result = await response.json();
    showAlert('success', `ƒê√£ b·∫Øt ƒë·∫ßu th·ª±c thi playbook: ${filename}`);
    
    // Start monitoring execution status
    if (result.taskId) {
      monitorPlaybookExecution(result.taskId);
    }
    
    return result;
  } catch (error) {
    console.error('Error executing playbook:', error);
    showAlert('error', 'L·ªói th·ª±c thi playbook: ' + error.message);
    showPlaybookContentView(); // Show content view on error
    throw error;
  }
};

// Monitor playbook execution
async function monitorPlaybookExecution(taskId) {
  const outputElement = document.getElementById('ansible-output');
  const progressElement = document.getElementById('execution-progress');
  const spinnerElement = document.getElementById('execution-spinner');
  
  if (!outputElement || !progressElement || !spinnerElement) {
    console.error('Execution elements not found');
    return;
  }
  
  // Clear previous output
  outputElement.innerHTML = '';
  
  // Show progress and spinner
  progressElement.style.display = 'block';
  spinnerElement.style.display = 'inline-block';
  
  const checkStatus = async () => {
    try {
      const response = await fetch(`/api/ansible-playbook/status/${getClusterId()}/${taskId}`);
      if (!response.ok) {
        throw new Error('Failed to check status');
      }
      
      const status = await response.json();
      
      // Update progress bar
      const progressBar = progressElement.querySelector('.progress-bar');
      if (progressBar) {
        progressBar.style.width = `${status.progress || 0}%`;
        progressBar.setAttribute('aria-valuenow', status.progress || 0);
      }
      
      // Update output
      if (status.output && status.output.length > 0) {
        const newOutput = status.output.slice(outputElement.children.length);
        newOutput.forEach(line => {
          const lineElement = document.createElement('div');
          lineElement.className = 'output-line';
          
          // Color coding for different types of output
          if (line.includes('TASK') || line.includes('PLAY')) {
            lineElement.className += ' task-header';
          } else if (line.includes('ok:') || line.includes('changed:')) {
            lineElement.className += ' success';
          } else if (line.includes('fatal:') || line.includes('failed:')) {
            lineElement.className += ' error';
          } else if (line.includes('skipping:')) {
            lineElement.className += ' warning';
          }
          
          lineElement.textContent = line;
          outputElement.appendChild(lineElement);
        });
        
        // Scroll to bottom
        outputElement.scrollTop = outputElement.scrollHeight;
      }
      
      if (status.status === 'running') {
        setTimeout(checkStatus, 1000);
      } else {
        // Hide spinner
        spinnerElement.style.display = 'none';
        
         // Show completion message
         const summaryElement = document.createElement('div');
         summaryElement.className = 'text-success mt-3 border-top pt-2';
         
         const titleElement = document.createElement('div');
         titleElement.className = 'fw-bold';
         titleElement.textContent = 'üéâ Ho√†n th√†nh th·ª±c thi playbook!';
         
         const timeElement = document.createElement('div');
         timeElement.className = 'small text-white';
         timeElement.textContent = `Th·ªùi gian th·ª±c thi: ${Math.round((status.endTime - status.startTime) / 1000)}s`;
         
         summaryElement.appendChild(titleElement);
         summaryElement.appendChild(timeElement);
         outputElement.appendChild(summaryElement);
      }
      
    } catch (error) {
      console.error('Error monitoring execution:', error);
      spinnerElement.style.display = 'none';
      
       const errorElement = document.createElement('div');
       errorElement.className = 'text-danger mt-3';
       
       const errorTitle = document.createElement('div');
       errorTitle.className = 'fw-bold';
       errorTitle.textContent = '‚ö†Ô∏è L·ªói ki·ªÉm tra tr·∫°ng th√°i';
       
       errorElement.appendChild(errorTitle);
       outputElement.appendChild(errorElement);
    }
  };
  
  checkStatus();
}

// Check if playbook exists
async function checkPlaybookExists(filename) {
  const cid = getClusterId();
  if (!cid) {
    console.log('No cluster ID found');
    return false;
  }
  
  try {
    const response = await fetch(`/api/ansible-playbook/list/${cid}`);
    if (!response.ok) {
      console.log('Failed to fetch playbook list:', response.status);
      return false;
    }
    
    const playbooks = await response.json();
    console.log('Current playbooks:', playbooks);
    console.log('Looking for:', filename);
    
    const exists = playbooks.includes(filename);
    console.log('File exists:', exists);
    return exists;
  } catch (error) {
    console.error('Error checking playbook:', error);
    return false;
  }
}

// Upload playbook
window.uploadPlaybook = async function(file) {
  const cid = getClusterId();
  if (!cid || !file) return;
  
  try {
    // Check if file already exists
    const originalFilename = file.name;
    const finalFilename = originalFilename.toLowerCase().endsWith('.yml') || originalFilename.toLowerCase().endsWith('.yaml') 
      ? originalFilename 
      : originalFilename + '.yml';
    
    const exists = await checkPlaybookExists(finalFilename);
    
    if (exists) {
      const confirmMessage = `Playbook "${finalFilename}" ƒë√£ t·ªìn t·∫°i. B·∫°n c√≥ mu·ªën ghi ƒë√® l√™n file c≈©?`;
      if (!confirm(confirmMessage)) {
        showAlert('info', 'ƒê√£ h·ªßy t·∫£i l√™n playbook');
        return;
      }
    }
    
    const formData = new FormData();
    formData.append('file', file);
    
    const response = await fetch(`/api/ansible-playbook/upload/${cid}`, {
      method: 'POST',
      body: formData
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'L·ªói t·∫£i l√™n playbook');
    }
    
    const result = await response.json();
    showAlert('success', `ƒê√£ t·∫£i l√™n playbook: ${result.filename}`);
    await loadPlaybooks(); // Refresh list
    
    // Load the uploaded playbook content
    await loadPlaybook(result.filename);
    
  } catch (error) {
    console.error('Error uploading playbook:', error);
    showAlert('error', 'L·ªói t·∫£i l√™n playbook: ' + error.message);
    throw error;
  }
};

// Generate K8s playbook from template
async function generateK8sPlaybookFromTemplate(template) {
  if (!getClusterId()) {
    throw new Error('Vui l√≤ng ch·ªçn cluster tr∆∞·ªõc');
  }
  
  const templates = {
    '01-update-hosts-hostname': `---
- name: C·∫≠p nh·∫≠t /etc/hosts v√† hostname cho to√†n b·ªô cluster
  hosts: all
  become: yes
  gather_facts: yes
  tasks:
    - name: Th√™m t·∫•t c·∫£ node trong inventory v√†o /etc/hosts (ch·ªâ khi ch∆∞a c√≥)
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item].ansible_host | default(item) }} {{ hostvars[item].ansible_user }}"
        state: present
        create: yes
        insertafter: EOF
      loop: "{{ groups['all'] }}"
      when: hostvars[item].ansible_user is defined
      tags: addhosts
      
    - name: ƒê·∫∑t hostname theo inventory (n·∫øu kh√°c)
      hostname:
        name: "{{ hostvars[inventory_hostname].ansible_user }}"
      when: ansible_hostname != hostvars[inventory_hostname].ansible_user
      tags: sethostname
      
    - name: Ki·ªÉm tra hostname sau khi c·∫≠p nh·∫≠t
      command: hostnamectl
      register: host_info
      changed_when: false
      tags: verify
      
    - name: Hi·ªÉn th·ªã th√¥ng tin sau khi c·∫≠p nh·∫≠t
      debug:
        msg:
          - "Hostname hi·ªán t·∫°i: {{ ansible_hostname }}"
          - "K·∫øt qu·∫£ l·ªánh hostnamectl:"
          - "{{ host_info.stdout_lines }}"
      tags: verify`,

    '02-kernel-sysctl': `---
- hosts: all
  become: yes
  environment:
    DEBIAN_FRONTEND: noninteractive
  tasks:
    - name: T·∫Øt swap
      shell: swapoff -a || true
      ignore_errors: true

    - name: Comment d√≤ng swap trong /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '(^.*swap.*$)'
        replace: '# \\1'

    - name: T·∫£i module kernel
      copy:
        dest: /etc/modules-load.d/containerd.conf
        content: |
          overlay
          br_netfilter

    - name: modprobe overlay v√† br_netfilter
      shell: |
        modprobe overlay
        modprobe br_netfilter

    - name: C·∫•u h√¨nh sysctl cho Kubernetes
      copy:
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1

    - name: √Åp d·ª•ng sysctl
      command: sysctl --system`,

    '03-install-containerd': `---
- hosts: all
  become: yes
  environment:
    DEBIAN_FRONTEND: noninteractive
  tasks:
    - name: C·∫≠p nh·∫≠t cache
      apt:
        update_cache: yes

    - name: C√†i containerd
      apt:
        name: containerd
        state: present
        force_apt_get: yes

    - name: T·∫°o th∆∞ m·ª•c c·∫•u h√¨nh containerd
      file:
        path: /etc/containerd
        state: directory

    - name: Sinh file config m·∫∑c ƒë·ªãnh
      shell: "containerd config default > /etc/containerd/config.toml"

    - name: B·∫≠t SystemdCgroup
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Kh·ªüi ƒë·ªông l·∫°i containerd
      systemd:
        name: containerd
        enabled: yes
        state: restarted`,

    '04-install-kubernetes': `---
- hosts: all
  become: yes
  environment:
    DEBIAN_FRONTEND: noninteractive
  tasks:
    - name: C√†i g√≥i ph·ª• thu·ªôc
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
        state: present
        update_cache: yes

    - name: Th√™m GPG key Kubernetes
      shell: |
        if [ ! -f /usr/share/keyrings/kubernetes-archive-keyring.gpg ]; then
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | \\
          gpg --dearmor --yes -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
        else
          echo "üîÅ GPG key ƒë√£ t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc n√†y."
        fi
      changed_when: false
      register: gpg_status  

    - name: Th√™m repository Kubernetes
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /

    - name: C√†i kubelet, kubeadm, kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Gi·ªØ phi√™n b·∫£n
      command: apt-mark hold kubelet kubeadm kubectl`,

    '05-init-master': `---
- hosts: master
  become: yes
  gather_facts: yes
  environment:
    DEBIAN_FRONTEND: noninteractive

  vars:
    pod_network_cidr: "10.244.0.0/16"
    calico_manifest: "https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/calico.yaml"
    join_script: "/etc/kubernetes/join-command.sh"

  tasks:
    - name: üîç L·∫•y ƒë·ªãa ch·ªâ master ƒë·ªông
      set_fact:
        master_ip: "{{ hostvars[inventory_hostname].ansible_host | default(ansible_default_ipv4.address) }}"

    - debug:
        msg: "üì° S·ª≠ d·ª•ng ƒë·ªãa ch·ªâ master: {{ master_ip }}"

    - name: üßπ Reset cluster c≈© v√† d·ªçn s·∫°ch d·ªØ li·ªáu
      shell: |
        kubeadm reset -f || true
        rm -rf /etc/kubernetes /var/lib/etcd /var/lib/kubelet /etc/cni/net.d
        systemctl restart containerd || true
      ignore_errors: yes

    - name: üöÄ Kh·ªüi t·∫°o Control Plane (Master)
      command: >
        kubeadm init
        --control-plane-endpoint "{{ master_ip }}:6443"
        --apiserver-advertise-address {{ master_ip }}
        --pod-network-cidr {{ pod_network_cidr }}
        --upload-certs
      args:
        creates: /etc/kubernetes/admin.conf
      register: kubeadm_init
      failed_when: "'error' in kubeadm_init.stderr"
      changed_when: "'Your Kubernetes control-plane has initialized successfully' in kubeadm_init.stdout"

    - name: ‚öôÔ∏è C·∫•u h√¨nh kubeconfig cho root
      shell: |
        mkdir -p $HOME/.kube
        cp /etc/kubernetes/admin.conf $HOME/.kube/config
        chown $(id -u):$(id -g) $HOME/.kube/config
      args:
        executable: /bin/bash

    - name: üîë Sinh l·ªánh join cho worker
      shell: kubeadm token create --print-join-command
      register: join_cmd
      changed_when: false

    - name: üíæ L∆∞u l·ªánh join ra file
      copy:
        content: "{{ join_cmd.stdout }}"
        dest: "{{ join_script }}"
        mode: '0755'

    - name: üßæ Hi·ªÉn th·ªã join command
      debug:
        msg:
          - "üéØ L·ªánh join worker:"
          - "{{ join_cmd.stdout }}"
          - "‚û°Ô∏è File l∆∞u t·∫°i: {{ join_script }}"

    - name: ‚úÖ Ho√†n t·∫•t kh·ªüi t·∫°o master
      debug:
        msg: "üéâ Master {{ inventory_hostname }} ƒë√£ s·∫µn s√†ng cho worker join!"`,

    '06-install-cni': `---
- name: üåê C√†i ƒë·∫∑t ho·∫∑c c·∫≠p nh·∫≠t Calico CNI (t·ª± ƒë·ªông)
  hosts: master
  become: yes
  gather_facts: no
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
    DEBIAN_FRONTEND: noninteractive

  vars:
    calico_version: "v3.27.3"
    calico_url: "https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/calico.yaml"

  tasks:
    - name: üîç Ki·ªÉm tra Calico CNI c√≥ t·ªìn t·∫°i kh√¥ng
      shell: kubectl get daemonset calico-node -n kube-system -o jsonpath='{.metadata.name}' 2>/dev/null || true
      register: calico_check

    - name: üìã Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
      debug:
        msg: >
          {{ 'üîß Calico ƒë√£ ƒë∆∞·ª£c c√†i: ' + calico_check.stdout if calico_check.stdout != '' else 'üö´ Ch∆∞a c√≥ Calico, s·∫Ω ti·∫øn h√†nh c√†i ƒë·∫∑t m·ªõi.' }}

    - name: üåê √Åp d·ª•ng Calico manifest (c√†i m·ªõi ho·∫∑c c·∫≠p nh·∫≠t)
      shell: >
        kubectl apply -f {{ calico_url }}
      args:
        executable: /bin/bash
      register: calico_apply
      retries: 3
      delay: 10
      until: calico_apply.rc == 0

    - name: üßæ Hi·ªÉn th·ªã k·∫øt qu·∫£ c√†i / c·∫≠p nh·∫≠t
      debug:
        msg: "{{ calico_apply.stdout_lines | default(['CNI applied']) }}"

    - name: ‚è≥ Ch·ªù Calico node pod ch·∫°y
      shell: >
        kubectl get pods -n kube-system -l k8s-app=calico-node --no-headers | grep -c 'Running'
      register: calico_pods
      retries: 10
      delay: 15
      until: calico_pods.stdout | int > 0

    - name: üü¢ X√°c nh·∫≠n Calico pods ƒëang ch·∫°y
      debug:
        msg: "‚úÖ Calico ƒëang ho·∫°t ƒë·ªông ({{ calico_pods.stdout }} pods Running)."

    - name: üîç Ki·ªÉm tra tr·∫°ng th√°i node
      shell: kubectl get nodes -o wide
      register: nodes_status

    - name: üßæ Hi·ªÉn th·ªã k·∫øt qu·∫£ cluster
      debug:
        msg: "{{ nodes_status.stdout_lines }}"`,

    '07-join-workers': `---
- hosts: workers
  become: yes
  gather_facts: no
  environment:
    DEBIAN_FRONTEND: noninteractive

  vars:
    join_script: /tmp/kube_join.sh

  tasks:
    - name: üîç L·∫•y ƒë·ªãa ch·ªâ master ƒë·ªông
      set_fact:
        master_ip: "{{ hostvars[groups['master'][0]].ansible_host | default(hostvars[groups['master'][0]].ansible_default_ipv4.address) }}"
    - debug:
        msg: "üì° Master IP ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ join: {{ master_ip }}"

    - name: üîë L·∫•y l·ªánh join t·ª´ master
      delegate_to: "{{ master_ip }}"
      run_once: true
      shell: kubeadm token create --print-join-command
      register: join_cmd

    - name: üíæ Ghi l·ªánh join ra file
      copy:
        content: "{{ join_cmd.stdout }} --ignore-preflight-errors=all"
        dest: "{{ join_script }}"
        mode: '0755'

    - name: üßπ Reset node (n·∫øu c√≥ c·ª•m c≈©)
      shell: |
        kubeadm reset -f || true
        rm -rf /etc/kubernetes /var/lib/kubelet /etc/cni/net.d
        systemctl restart containerd || true
      ignore_errors: yes

    - name: üöÄ Join v√†o c·ª•m Kubernetes
      shell: "{{ join_script }}"
      register: join_output
      ignore_errors: yes

    - name: üßæ Hi·ªÉn th·ªã k·∫øt qu·∫£ join
      debug:
        msg: "{{ join_output.stdout_lines | default(['ƒê√£ join th√†nh c√¥ng!']) }}"

    - name: üîÅ Kh·ªüi ƒë·ªông l·∫°i kubelet
      systemd:
        name: kubelet
        state: restarted
        enabled: yes

    - name: ‚úÖ Ho√†n t·∫•t
      debug:
        msg: "‚úÖ Node {{ inventory_hostname }} ƒë√£ tham gia c·ª•m th√†nh c√¥ng!"`,

    '08-install-ingress': `---
- hosts: master
  become: yes
  gather_facts: no
  environment:
    DEBIAN_FRONTEND: noninteractive

  tasks:
    - name: üîç L·∫•y ƒë·ªãa ch·ªâ master ƒë·ªông
      set_fact:
        master_ip: "{{ hostvars[inventory_hostname].ansible_host | default(ansible_default_ipv4.address) }}"
    - debug:
        msg: "üì° C√†i ƒë·∫∑t Ingress tr√™n master: {{ master_ip }}"

    - name: üåê C√†i ƒë·∫∑t Ingress Controller (nginx)
      shell: |
        KUBECONFIG=/etc/kubernetes/admin.conf \
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
      args:
        executable: /bin/bash
      register: ingress_install
      ignore_errors: yes

    - name: üßæ K·∫øt qu·∫£ c√†i Ingress
      debug:
        msg: "{{ ingress_install.stdout_lines | default(['Ingress Controller applied']) }}"

    - name: üß† Ki·ªÉm tra tr·∫°ng th√°i pod ingress-nginx
      shell: |
        KUBECONFIG=/etc/kubernetes/admin.conf \
        kubectl get pods -n ingress-nginx -o wide
      register: ingress_pods

    - name: üìã Hi·ªÉn th·ªã pod ingress-nginx
      debug:
        msg: "{{ ingress_pods.stdout_lines }}"

    - name: ‚úÖ Ho√†n t·∫•t
      debug:
        msg: "üéâ Ingress Controller (NGINX) ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng!"`,

    '09-install-helm': `---
- hosts: master
  become: yes
  gather_facts: yes
  environment:
    DEBIAN_FRONTEND: noninteractive

  tasks:
    - name: üì¶ C√†i ƒë·∫∑t Helm n·∫øu ch∆∞a c√≥
      shell: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      args:
        executable: /bin/bash
      register: helm_install
      ignore_errors: yes

    - name: üßæ K·∫øt qu·∫£ c√†i ƒë·∫∑t Helm
      debug:
        msg: "{{ helm_install.stdout_lines | default(['Helm installed']) }}"

    - name: üîç Ki·ªÉm tra phi√™n b·∫£n Helm
      shell: helm version --short
      register: helm_version

    - name: üìä Hi·ªÉn th·ªã th√¥ng tin Helm
      debug:
        msg: "üéØ Phi√™n b·∫£n Helm hi·ªán t·∫°i: {{ helm_version.stdout | default('Kh√¥ng x√°c ƒë·ªãnh') }}"

    - name: ‚úÖ Ho√†n t·∫•t
      debug:
        msg: "üéâ Helm ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng tr√™n master!"`,

    '10-setup-storage': `---
- hosts: master
  become: yes
  gather_facts: no
  environment:
    DEBIAN_FRONTEND: noninteractive

  vars:
    nfs_manifest_dir: /etc/kubernetes/storage

  tasks:
    - name: üìÅ T·∫°o th∆∞ m·ª•c manifest NFS
      file:
        path: "{{ nfs_manifest_dir }}"
        state: directory
        mode: '0755'

    - name: üì¶ T·∫£i v√† √°p d·ª•ng NFS Provisioner (example)
      shell: |
        KUBECONFIG=/etc/kubernetes/admin.conf \
        kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/deploy/rbac.yaml
        KUBECONFIG=/etc/kubernetes/admin.conf \
        kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/deploy/deployment.yaml
      args:
        executable: /bin/bash
      register: nfs_apply
      ignore_errors: yes

    - name: üßæ K·∫øt qu·∫£ tri·ªÉn khai NFS
      debug:
        msg: "{{ nfs_apply.stdout_lines | default(['NFS Provisioner applied']) }}"

    - name: üß© ƒê·∫∑t StorageClass m·∫∑c ƒë·ªãnh
      shell: |
        KUBECONFIG=/etc/kubernetes/admin.conf \
        kubectl patch storageclass nfs-client -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}' || true
      args:
        executable: /bin/bash

    - name: ‚úÖ Ho√†n t·∫•t
      debug:
        msg: "üéâ C·∫•u h√¨nh StorageClass (NFS) m·∫∑c ƒë·ªãnh ƒë√£ ho√†n t·∫•t!"`,

    'see-cluster': `---
- name: üß© Ki·ªÉm tra tr·∫°ng th√°i c·ª•m Kubernetes
  hosts: master
  become: yes
  gather_facts: no
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
    DEBIAN_FRONTEND: noninteractive

  tasks:
    - name: ‚öôÔ∏è Ki·ªÉm tra kubectl c√≥ s·∫µn kh√¥ng
      command: which kubectl
      register: kubectl_check
      failed_when: kubectl_check.rc != 0
      changed_when: false

    - name: üìã Li·ªát k√™ danh s√°ch node
      command: kubectl get nodes -o wide
      register: nodes_info
      changed_when: false

    - name: üì¶ Li·ªát k√™ pods h·ªá th·ªëng
      command: kubectl get pods -n kube-system -o wide
      register: pods_info
      changed_when: false

    - name: ‚úÖ Hi·ªÉn th·ªã th√¥ng tin c·ª•m
      debug:
        msg:
          - "üì¶ Node List:"
          - "{{ nodes_info.stdout_lines }}"
          - "üì¶ Pods trong namespace kube-system:"
          - "{{ pods_info.stdout_lines }}"

    - name: üß† Ki·ªÉm tra tr·∫°ng th√°i node (Ready/NotReady)
      shell: kubectl get nodes --no-headers | awk '{print $2}' | sort | uniq -c
      register: node_status
      changed_when: false

    - name: üìä B√°o c√°o t√¨nh tr·∫°ng c·ª•m
      debug:
        msg: |
          {% if 'NotReady' in node_status.stdout %}
          ‚ö†Ô∏è M·ªôt s·ªë node ch∆∞a s·∫µn s√†ng:
          {{ node_status.stdout }}
          {% else %}
          üéØ To√†n b·ªô node ƒë√£ ·ªü tr·∫°ng th√°i Ready!
          {% endif %}`,

    '00-reset-cluster': `---
- name: üßπ Reset to√†n b·ªô c·ª•m Kubernetes (master + worker)
  hosts: all
  become: yes
  gather_facts: no
  environment:
    DEBIAN_FRONTEND: noninteractive

  tasks:
    - name: üßΩ G·ª° c·ª•m Kubernetes (kubeadm reset -f)
      shell: kubeadm reset -f
      ignore_errors: true
      register: reset_output

    - name: üìã Hi·ªÉn th·ªã k·∫øt qu·∫£ reset
      debug:
        msg: "{{ reset_output.stdout_lines | default(['Kh√¥ng c√≥ cluster c≈© ƒë·ªÉ reset.']) }}"

    - name: üßπ X√≥a th∆∞ m·ª•c c·∫•u h√¨nh Kubernetes
      file:
        path: /etc/kubernetes
        state: absent

    - name: üßπ X√≥a c·∫•u h√¨nh m·∫°ng CNI
      file:
        path: /etc/cni/net.d
        state: absent

    - name: üßπ X√≥a file kubeconfig c·ªßa root
      file:
        path: /root/.kube
        state: absent

    - name: üßπ X√≥a file kubeconfig c·ªßa user th∆∞·ªùng ({{ ansible_user }})
      file:
        path: "/home/{{ ansible_user }}/.kube"
        state: absent
      when: ansible_user != "root"

    - name: üß© D·ªçn iptables
      shell: |
        iptables -F && iptables -X
        iptables -t nat -F && iptables -t nat -X
        iptables -t mangle -F && iptables -t mangle -X
        iptables -P FORWARD ACCEPT
      ignore_errors: true

    - name: üß∞ Kh·ªüi ƒë·ªông l·∫°i containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    - name: ‚úÖ X√°c nh·∫≠n reset ho√†n t·∫•t
      debug:
        msg:
          - "üéØ Node {{ inventory_hostname }} ƒë√£ ƒë∆∞·ª£c reset s·∫°ch (ch·ªâ x√≥a d·ªØ li·ªáu)."`,

    'deploy-full-cluster': `---
- name: üöÄ Tri·ªÉn khai to√†n b·ªô cluster K8s (t·ª´ 1-8)
  hosts: all
  become: yes
  gather_facts: yes
  environment:
    DEBIAN_FRONTEND: noninteractive

  tasks:
    # B∆∞·ªõc 1: C·∫≠p nh·∫≠t hosts & hostname
    - name: üìù B∆∞·ªõc 1: Th√™m t·∫•t c·∫£ node v√†o /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item].ansible_host | default(item) }} {{ hostvars[item].ansible_user }}"
        state: present
        create: yes
        insertafter: EOF
      loop: "{{ groups['all'] }}"
      when: hostvars[item].ansible_user is defined

    - name: üìù ƒê·∫∑t hostname theo inventory
      hostname:
        name: "{{ hostvars[inventory_hostname].ansible_user }}"
      when: ansible_hostname != hostvars[inventory_hostname].ansible_user

    # B∆∞·ªõc 2: C·∫•u h√¨nh kernel & sysctl
    - name: ‚öôÔ∏è B∆∞·ªõc 2: T·∫Øt swap
      shell: swapoff -a || true
      ignore_errors: true

    - name: ‚öôÔ∏è Comment d√≤ng swap trong /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '(^.*swap.*$)'
        replace: '# \\1'

    - name: ‚öôÔ∏è T·∫£i module kernel
      copy:
        dest: /etc/modules-load.d/containerd.conf
        content: |
          overlay
          br_netfilter

    - name: ‚öôÔ∏è modprobe overlay v√† br_netfilter
      shell: |
        modprobe overlay
        modprobe br_netfilter

    - name: ‚öôÔ∏è C·∫•u h√¨nh sysctl cho Kubernetes
      copy:
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1

    - name: ‚öôÔ∏è √Åp d·ª•ng sysctl
      command: sysctl --system

    # B∆∞·ªõc 3: C√†i ƒë·∫∑t containerd
    - name: üê≥ B∆∞·ªõc 3: C·∫≠p nh·∫≠t cache
      apt:
        update_cache: yes

    - name: üê≥ C√†i containerd
      apt:
        name: containerd
        state: present
        force_apt_get: yes

    - name: üê≥ T·∫°o th∆∞ m·ª•c c·∫•u h√¨nh containerd
      file:
        path: /etc/containerd
        state: directory

    - name: üê≥ Sinh file config m·∫∑c ƒë·ªãnh
      shell: "containerd config default > /etc/containerd/config.toml"

    - name: üê≥ B·∫≠t SystemdCgroup
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: üê≥ Kh·ªüi ƒë·ªông l·∫°i containerd
      systemd:
        name: containerd
        enabled: yes
        state: restarted

    # B∆∞·ªõc 4: C√†i ƒë·∫∑t Kubernetes
    - name: ‚ò∏Ô∏è B∆∞·ªõc 4: C√†i g√≥i ph·ª• thu·ªôc
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
        state: present
        update_cache: yes

    - name: ‚ò∏Ô∏è Th√™m GPG key Kubernetes
      shell: |
        if [ ! -f /usr/share/keyrings/kubernetes-archive-keyring.gpg ]; then
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | \\
          gpg --dearmor --yes -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
        else
          echo "üîÅ GPG key ƒë√£ t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc n√†y."
        fi
      changed_when: false

    - name: ‚ò∏Ô∏è Th√™m repository Kubernetes
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /

    - name: ‚ò∏Ô∏è C√†i kubelet, kubeadm, kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: ‚ò∏Ô∏è Gi·ªØ phi√™n b·∫£n
      command: apt-mark hold kubelet kubeadm kubectl

    # B∆∞·ªõc 5: Kh·ªüi t·∫°o master (ch·ªâ tr√™n master)
    - name: üîç B∆∞·ªõc 5: L·∫•y ƒë·ªãa ch·ªâ master ƒë·ªông
      set_fact:
        master_ip: "{{ hostvars[inventory_hostname].ansible_host | default(ansible_default_ipv4.address) }}"
      when: inventory_hostname in groups['master']

    - name: üì° Hi·ªÉn th·ªã ƒë·ªãa ch·ªâ master
      debug:
        msg: "üì° S·ª≠ d·ª•ng ƒë·ªãa ch·ªâ master: {{ master_ip }}"
      when: inventory_hostname in groups['master']

    - name: üßπ Reset cluster c≈© v√† d·ªçn s·∫°ch d·ªØ li·ªáu
      shell: |
        kubeadm reset -f || true
        rm -rf /etc/kubernetes /var/lib/etcd /var/lib/kubelet /etc/cni/net.d
        systemctl restart containerd || true
      ignore_errors: yes
      when: inventory_hostname in groups['master']

    - name: üöÄ Kh·ªüi t·∫°o Control Plane (Master)
      command: >
        kubeadm init
        --control-plane-endpoint "{{ master_ip }}:6443"
        --apiserver-advertise-address {{ master_ip }}
        --pod-network-cidr 10.244.0.0/16
        --upload-certs
      args:
        creates: /etc/kubernetes/admin.conf
      register: kubeadm_init
      failed_when: "'error' in kubeadm_init.stderr"
      changed_when: "'Your Kubernetes control-plane has initialized successfully' in kubeadm_init.stdout"
      when: inventory_hostname in groups['master']

    - name: ‚öôÔ∏è C·∫•u h√¨nh kubeconfig cho root
      shell: |
        mkdir -p $HOME/.kube
        cp /etc/kubernetes/admin.conf $HOME/.kube/config
        chown $(id -u):$(id -g) $HOME/.kube/config
      args:
        executable: /bin/bash
      when: inventory_hostname in groups['master']

    # B∆∞·ªõc 6: C√†i ƒë·∫∑t CNI (ch·ªâ tr√™n master)
    - name: üîç Ki·ªÉm tra Calico CNI c√≥ t·ªìn t·∫°i kh√¥ng
      shell: kubectl get daemonset calico-node -n kube-system -o jsonpath='{.metadata.name}' 2>/dev/null || true
      register: calico_check
      when: inventory_hostname in groups['master']

    - name: üåê √Åp d·ª•ng Calico manifest (c√†i m·ªõi ho·∫∑c c·∫≠p nh·∫≠t)
      shell: >
        kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/calico.yaml
      args:
        executable: /bin/bash
      when: inventory_hostname in groups['master']

    - name: ‚è≥ Ch·ªù Calico node pod ch·∫°y
      shell: >
        kubectl get pods -n kube-system -l k8s-app=calico-node --no-headers | grep -c 'Running'
      register: calico_pods
      retries: 10
      delay: 15
      until: calico_pods.stdout | int > 0
      when: inventory_hostname in groups['master']

    # B∆∞·ªõc 7: Join workers (ch·ªâ tr√™n workers)
    - name: üîç L·∫•y ƒë·ªãa ch·ªâ master ƒë·ªông
      set_fact:
        master_ip: "{{ hostvars[groups['master'][0]].ansible_host | default(hostvars[groups['master'][0]].ansible_default_ipv4.address) }}"
      when: inventory_hostname in groups['worker']

    - name: üîë L·∫•y l·ªánh join t·ª´ master
      delegate_to: "{{ master_ip }}"
      run_once: true
      shell: kubeadm token create --print-join-command
      register: join_cmd
      when: inventory_hostname in groups['worker']

    - name: üíæ Ghi l·ªánh join ra file
      copy:
        content: "{{ join_cmd.stdout }} --ignore-preflight-errors=all"
        dest: /tmp/kube_join.sh
        mode: '0755'
      when: inventory_hostname in groups['worker']

    - name: üßπ Reset node (n·∫øu c√≥ c·ª•m c≈©)
      shell: |
        kubeadm reset -f || true
        rm -rf /etc/kubernetes /var/lib/kubelet /etc/cni/net.d
        systemctl restart containerd || true
      ignore_errors: yes
      when: inventory_hostname in groups['worker']

    - name: üöÄ Join v√†o c·ª•m Kubernetes
      shell: "/tmp/kube_join.sh"
      register: join_output
      ignore_errors: yes
      when: inventory_hostname in groups['worker']

    - name: üîÅ Kh·ªüi ƒë·ªông l·∫°i kubelet
      systemd:
        name: kubelet
        state: restarted
        enabled: yes
      when: inventory_hostname in groups['worker']

    # B∆∞·ªõc 8: Ki·ªÉm tra tr·∫°ng th√°i cluster (ch·ªâ tr√™n master)
    - name: üëÄ B∆∞·ªõc 8: Ki·ªÉm tra kubectl c√≥ s·∫µn kh√¥ng
      command: which kubectl
      register: kubectl_check
      failed_when: kubectl_check.rc != 0
      changed_when: false
      when: inventory_hostname in groups['master']

    - name: üëÄ Li·ªát k√™ danh s√°ch node
      command: kubectl get nodes -o wide
      register: nodes_info
      changed_when: false
      when: inventory_hostname in groups['master']

    - name: üëÄ Li·ªát k√™ pods h·ªá th·ªëng
      command: kubectl get pods -n kube-system -o wide
      register: pods_info
      changed_when: false
      when: inventory_hostname in groups['master']

    - name: üëÄ Hi·ªÉn th·ªã th√¥ng tin c·ª•m
      debug:
        msg:
          - "üì¶ Node List:"
          - "{{ nodes_info.stdout_lines }}"
          - "üì¶ Pods trong namespace kube-system:"
          - "{{ pods_info.stdout_lines }}"
      when: inventory_hostname in groups['master'] and nodes_info is defined

    - name: üéâ Ho√†n th√†nh tri·ªÉn khai cluster
      debug:
        msg:
          - "‚úÖ Cluster Kubernetes ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai th√†nh c√¥ng!"
          - "üìä T·ªïng s·ªë node: {{ groups['all'] | length }}"
          - "üéØ Master: {{ groups['master'] | length }}"
          - "üîß Workers: {{ groups['worker'] | length }}"
      when: inventory_hostname in groups['master']`
  };
  
  // Map template value (without numbers) to template key (with numbers)
  const templateMapping = {
    'update-hosts-hostname': '01-update-hosts-hostname',
    'kernel-sysctl': '02-kernel-sysctl',
    'install-containerd': '03-install-containerd',
    'install-kubernetes': '04-install-kubernetes',
    'init-master': '05-init-master',
    'install-cni': '06-install-cni',
    'join-workers': '07-join-workers',
    'install-ingress': '08-install-ingress',
    'install-helm': '09-install-helm',
    'setup-storage': '10-setup-storage',
    'see-cluster': 'see-cluster',
    'deploy-full-cluster': 'deploy-full-cluster',
    'reset-cluster': '00-reset-cluster'
  };
  
  // Get the actual template key
  const actualTemplate = templateMapping[template] || template;
  
  const playbookContent = templates[actualTemplate];
  if (!playbookContent) {
    throw new Error('Template kh√¥ng t·ªìn t·∫°i');
  }
  
  const filename = actualTemplate + '.yml';
  
  // Check if playbook already exists
  const exists = await checkPlaybookExists(filename);
  console.log(`Checking if ${filename} exists:`, exists);
  
  if (exists) {
    const templateNames = {
      '00-reset-cluster': 'üßπ Reset to√†n b·ªô cluster',
      '01-update-hosts-hostname': 'üìù C·∫≠p nh·∫≠t hosts & hostname',
      '02-kernel-sysctl': '‚öôÔ∏è C·∫•u h√¨nh kernel & sysctl',
      '03-install-containerd': 'üê≥ C√†i ƒë·∫∑t Containerd',
      '04-install-kubernetes': '‚ò∏Ô∏è C√†i ƒë·∫∑t Kubernetes',
      '05-init-master': 'üöÄ Kh·ªüi t·∫°o Master',
      '06-install-cni': 'üåê C√†i ƒë·∫∑t CNI (Calico)',
      '07-join-workers': 'üîó Join Workers',
      '08-install-ingress': 'üåê C√†i Ingress Controller',
      '09-install-helm': '‚öì C√†i Helm',
      '10-setup-storage': 'üíæ Setup Storage',
      'see-cluster': 'üëÄ Xem tr·∫°ng th√°i cluster',
      'deploy-full-cluster': 'üöÄ Tri·ªÉn khai to√†n b·ªô cluster'
    };
    
    const templateName = templateNames[actualTemplate] || actualTemplate;
    const confirmMessage = `Playbook "${filename}" (${templateName}) ƒë√£ t·ªìn t·∫°i. B·∫°n c√≥ mu·ªën ghi ƒë√® l√™n file c≈©?`;
    
    console.log('Showing confirm dialog for:', confirmMessage);
    
    if (!confirm(confirmMessage)) {
      console.log('User cancelled overwrite');
      throw new Error('ƒê√£ h·ªßy t·∫°o playbook t·ª´ template');
    }
    
    console.log('User confirmed overwrite');
  }
  
  // Thay th·∫ø cluster_id trong playbook content n·∫øu c√≥
  let finalPlaybookContent = playbookContent;
  if (getClusterId() && playbookContent.includes('{{ cluster_id | default(1) }}')) {
    finalPlaybookContent = playbookContent.replace('{{ cluster_id | default(1) }}', getClusterId());
  }
  
  try {
    const result = await fetch(`/api/ansible-playbook/save/${getClusterId()}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: `filename=${encodeURIComponent(filename)}&content=${encodeURIComponent(finalPlaybookContent)}`
    });
    
    if (!result.ok) {
      const errorData = await result.json();
      throw new Error(errorData.error || 'L·ªói t·∫°o playbook');
    }
    
    return await result.json();
  } catch (error) {
    console.error('Error generating K8s playbook:', error);
    throw error;
  }
}

// Show playbook content view
function showPlaybookContentView() {
  const contentArea = document.getElementById('playbook-content-area');
  const executionArea = document.getElementById('playbook-execution-status');
  
  if (contentArea) contentArea.style.display = 'block';
  if (executionArea) executionArea.style.display = 'none';
}

// Show playbook execution view
function showPlaybookExecutionView() {
  const contentArea = document.getElementById('playbook-content-area');
  const executionArea = document.getElementById('playbook-execution-status');
  
  if (contentArea) contentArea.style.display = 'none';
  if (executionArea) executionArea.style.display = 'block';
}

// Search playbooks
function searchPlaybooks(query) {
  const items = document.querySelectorAll('#playbook-list .playbook-item');
  const searchTerm = query.toLowerCase().trim();
  
  items.forEach(item => {
    const playbookName = item.textContent.toLowerCase();
    const shouldShow = playbookName.includes(searchTerm);
    
    const listItem = item.closest('.list-group-item');
    if (listItem) {
      listItem.style.display = shouldShow ? 'flex' : 'none';
    }
  });
}

// Refresh playbooks
window.refreshPlaybooks = async function() {
  const refreshBtn = document.getElementById('refresh-playbooks-btn');
  if (refreshBtn) {
    refreshBtn.disabled = true;
    refreshBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>ƒêang t·∫£i...';
  }
  
  try {
    await loadPlaybooks();
  } catch (error) {
    console.error('Error refreshing playbooks:', error);
    showAlert('error', 'L·ªói l√†m m·ªõi danh s√°ch playbook');
  } finally {
    if (refreshBtn) {
      refreshBtn.disabled = false;
      refreshBtn.innerHTML = 'üîÑ L√†m m·ªõi';
    }
  }
};

// Set current cluster ID
function setCurrentClusterId(clusterId) {
  currentClusterId = clusterId;
}

// Export functions for global access
window.loadPlaybook = loadPlaybook;
window.savePlaybook = savePlaybook;
window.deletePlaybook = deletePlaybook;
window.executePlaybook = executePlaybook;
window.uploadPlaybook = uploadPlaybook;
window.refreshPlaybooks = refreshPlaybooks;
window.searchPlaybooks = searchPlaybooks;
window.showPlaybookContentView = showPlaybookContentView;
window.showPlaybookExecutionView = showPlaybookExecutionView;
window.setCurrentClusterId = setCurrentClusterId;
window.generateK8sPlaybookFromTemplate = generateK8sPlaybookFromTemplate;
